<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
<title>Control de Versiones Simulado</title>
<style>
  /* Reset and base */
  * {
    box-sizing: border-box;
  }
  body {
    margin: 0;
    font-family: 'Consolas', 'Monaco', monospace, monospace;
    background-color: #121212;
    color: #e0e0e0;
    display: flex;
    flex-direction: column;
    height: 100vh;
    max-height: 600px;
    max-width: 350px;
    margin-left: auto;
    margin-right: auto;
    padding: 10px;
  }
  h1 {
    margin: 0 0 15px 0;
    font-weight: 700;
    font-size: 1.5rem;
    text-align: center;
    color: #61dafb;
  }
  .container {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    border: 1px solid #333;
    border-radius: 5px;
    padding: 10px;
    background-color: #1e1e1e;
  }
  .files-section, .commit-section, .history-section {
    margin-bottom: 15px;
    flex: none;
  }
  .files-list {
    background-color: #2c2c2c;
    border-radius: 4px;
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid #444;
  }
  .file-item {
    display: flex;
    justify-content: space-between;
    padding: 5px 10px;
    cursor: pointer;
    border-bottom: 1px solid #444;
    user-select: none;
  }
  .file-item:last-child {
    border-bottom: none;
  }
  .file-name {
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .status {
    width: 80px;
    text-align: right;
    font-weight: 600;
  }
  .status.modified {
    color: #f0ad4e;
  }
  .status.staged {
    color: #5cb85c;
  }
  .status.committed {
    color: #999;
  }
  .buttons {
    display: flex;
    gap: 8px;
    margin-top: 8px;
    flex-wrap: wrap;
  }
  button {
    cursor: pointer;
    background-color: #292929;
    border: 1px solid #444;
    color: #e0e0e0;
    padding: 6px 10px;
    border-radius: 4px;
    font-weight: 600;
    transition: background-color 0.2s ease;
    flex: 1 1 auto;
  }
  button:hover:not(:disabled) {
    background-color: #61dafb;
    color: #121212;
  }
  button:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }
  input[type="text"] {
    width: 100%;
    padding: 6px 10px;
    border-radius: 4px;
    border: 1px solid #444;
    background-color: #222;
    color: #e0e0e0;
    font-family: 'Consolas', monospace;
    font-size: 1rem;
    margin-top: 6px;
  }
  .history-list {
    background-color: #2c2c2c;
    border-radius: 4px;
    max-height: 150px;
    overflow-y: auto;
    border: 1px solid #444;
    font-size: 0.9rem;
  }
  .commit-item {
    padding: 6px 10px;
    border-bottom: 1px solid #444;
  }
  .commit-item:last-child {
    border-bottom: none;
  }
  .commit-message {
    font-weight: 600;
    color: #61dafb;
    margin-bottom: 4px;
  }
  .commit-time {
    color: #999;
    font-size: 0.8rem;
    font-style: italic;
  }

  /* Scrollbar styling */
  .files-list::-webkit-scrollbar,
  .history-list::-webkit-scrollbar {
    width: 6px;
    background-color: #1e1e1e;
  }
  .files-list::-webkit-scrollbar-thumb,
  .history-list::-webkit-scrollbar-thumb {
    background-color: #444;
    border-radius: 3px;
  }

  @media (max-width: 400px) {
    body {
      max-width: 100vw;
      max-height: 600px;
    }
  }
</style>
</head>
<body>
<h1>Simulador Control de Versiones</h1>
<div class="container">
  <section class="files-section">
    <h2>Archivos</h2>
    <div class="files-list" id="filesList" aria-label="Lista de archivos">
      <!-- Files will be populated here -->
    </div>
    <div class="buttons">
      <button id="stageBtn" disabled>Stage (Preparar)</button>
      <button id="unstageBtn" disabled>Unstage (Despreparar)</button>
      <button id="resetBtn" disabled>Reset (Restaurar)</button>
    </div>
  </section>

  <section class="commit-section">
    <h2>Commit</h2>
    <input type="text" id="commitMsg" placeholder="Mensaje del commit..." aria-label="Mensaje del commit" />
    <button id="commitBtn" disabled>Hacer Commit</button>
  </section>

  <section class="history-section">
    <h2>Historial de Commits</h2>
    <div class="history-list" id="commitHistory" aria-live="polite" aria-label="Historial de commits">
      <div style="padding:10px; color:#666;">No hay commits aún.</div>
    </div>
  </section>
</div>
<script>
  // File states: unmodified, modified, staged, committed
  const files = [
    { name: 'index.html', state: 'modified' },
    { name: 'app.js', state: 'modified' },
    { name: 'style.css', state: 'modified' },
    { name: 'README.md', state: 'committed' },
  ];

  let selectedFileIndex = null;
  const filesListEl = document.getElementById('filesList');
  const stageBtn = document.getElementById('stageBtn');
  const unstageBtn = document.getElementById('unstageBtn');
  const resetBtn = document.getElementById('resetBtn');
  const commitBtn = document.getElementById('commitBtn');
  const commitMsgInput = document.getElementById('commitMsg');
  const commitHistoryEl = document.getElementById('commitHistory');

  const commits = [];

  // Utility to format date/time string
  function formatDate(date) {
    return date.toLocaleString();
  }

  // Render files list
  function renderFiles() {
    filesListEl.innerHTML = '';
    files.forEach((file, idx) => {
      const div = document.createElement('div');
      div.classList.add('file-item');
      div.setAttribute('tabindex', '0');
      div.setAttribute('role', 'button');
      div.setAttribute('aria-pressed', idx === selectedFileIndex ? 'true' : 'false');

      if (idx === selectedFileIndex) {
        div.style.backgroundColor = '#333';
      }
      const nameSpan = document.createElement('span');
      nameSpan.classList.add('file-name');
      nameSpan.textContent = file.name;

      const statusSpan = document.createElement('span');
      statusSpan.classList.add('status', file.state);
      statusSpan.textContent = file.state.charAt(0).toUpperCase() + file.state.slice(1);

      div.appendChild(nameSpan);
      div.appendChild(statusSpan);

      div.addEventListener('click', () => {
        selectFile(idx);
      });
      div.addEventListener('keydown', (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          selectFile(idx);
        }
      });

      filesListEl.appendChild(div);
    });
    updateButtons();
    updateCommitButton();
  }

  // Select a file
  function selectFile(index) {
    if (selectedFileIndex === index) {
      selectedFileIndex = null;
    } else {
      selectedFileIndex = index;
    }
    renderFiles();
  }

  // Update buttons based on selection and states
  function updateButtons() {
    if (selectedFileIndex === null) {
      stageBtn.disabled = true;
      unstageBtn.disabled = true;
      resetBtn.disabled = true;
      return;
    }
    const file = files[selectedFileIndex];
    // Stage button enabled only if file is modified (not staged or committed)
    stageBtn.disabled = !(file.state === 'modified');
    // Unstage button enabled only if file is staged
    unstageBtn.disabled = !(file.state === 'staged');
    // Reset button enabled if modified or staged
    resetBtn.disabled = !(file.state === 'modified' || file.state === 'staged');
  }

  // Update commit button enabled status
  function updateCommitButton() {
    // Enable commit if there is any file staged and commit message has at least 5 chars
    const anyStaged = files.some(f => f.state === 'staged');
    commitBtn.disabled = !(anyStaged && commitMsgInput.value.trim().length >= 5);
  }

  // Event handlers
  stageBtn.addEventListener('click', () => {
    if (selectedFileIndex === null) return;
    if (files[selectedFileIndex].state === 'modified') {
      files[selectedFileIndex].state = 'staged';
      renderFiles();
    }
  });

  unstageBtn.addEventListener('click', () => {
    if (selectedFileIndex === null) return;
    if (files[selectedFileIndex].state === 'staged') {
      files[selectedFileIndex].state = 'modified';
      renderFiles();
    }
  });

  resetBtn.addEventListener('click', () => {
    if (selectedFileIndex === null) return;
    if (files[selectedFileIndex].state === 'modified' || files[selectedFileIndex].state === 'staged') {
      // Reset restores file to committed state (simulate undo changes)
      files[selectedFileIndex].state = 'committed';
      renderFiles();
    }
  });

  commitBtn.addEventListener('click', () => {
    const message = commitMsgInput.value.trim();
    if (message.length < 5) return; // validation

    // Collect staged files
    const stagedFiles = files.filter(f => f.state === 'staged');
    if (stagedFiles.length === 0) return;

    // Commit: change staged files to committed
    stagedFiles.forEach(f => {
      f.state = 'committed';
    });

    // Add commit to history
    commits.unshift({
      message,
      time: new Date(),
      files: stagedFiles.map(f => f.name),
    });

    commitMsgInput.value = '';
    selectedFileIndex = null;
    renderFiles();
    renderCommits();
  });

  commitMsgInput.addEventListener('input', () => {
    updateCommitButton();
  });

  // Render commit history list
  function renderCommits() {
    if (commits.length === 0) {
      commitHistoryEl.innerHTML = '<div style="padding:10px; color:#666;">No hay commits aún.</div>';
      return;
    }
    commitHistoryEl.innerHTML = '';
    commits.forEach((commit) => {
      const div = document.createElement('div');
      div.classList.add('commit-item');

      const msgDiv = document.createElement('div');
      msgDiv.classList.add('commit-message');
      msgDiv.textContent = commit.message;

      const timeDiv = document.createElement('div');
      timeDiv.classList.add('commit-time');
      timeDiv.textContent = formatDate(commit.time) + ' — Archivos: ' + commit.files.join(', ');

      div.appendChild(msgDiv);
      div.appendChild(timeDiv);

      commitHistoryEl.appendChild(div);
    });
  }

  // Init
  renderFiles();
  renderCommits();
</script>
</body>
</html>
