<!DOCTYPE html>

<html lang="es">

<head>

<meta charset="UTF-8" />

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

<title>Control de Versiones Simulado</title>

<style>

 @import url('https://fonts.googleapis.com/css2?family=Fira+Code&display=swap');



 /* Reset and base */

 * {

  box-sizing: border-box;

 }

 body {

  margin: 0;

  font-family: 'Fira Code', monospace, monospace;

  background: linear-gradient(135deg, #222233, #1b1f3b);

  color: #e0e0e0;

  display: flex;

  flex-direction: column;

  height: 100vh;

  max-height: 600px;

  max-width: 350px;

  margin-left: auto;

  margin-right: auto;

  padding: 12px;

  user-select: none;

  -webkit-font-smoothing: antialiased;

 }

 h1 {

  margin: 0 0 18px 0;

  font-weight: 700;

  font-size: 1.75rem;

  text-align: center;

  color: #1db954;

  text-shadow: 0 0 8px rgba(29,185,84,0.7);

 }



 /* Container */

 .container {

  flex: 1 1 auto;

  display: flex;

  flex-direction: column;

  background: #12131c;

  border-radius: 10px;

  box-shadow:

   0 0 8px 1px rgba(29,185,84,0.2),

   inset 0 0 10px 5px #0f120f99;

  padding: 14px 18px;

 }

 section {

  margin-bottom: 20px;

  flex: none;

 }

 h2 {

  font-weight: 600;

  font-size: 1.15rem;

  margin-bottom: 8px;

  color: #a5d6a7;

  letter-spacing: 0.04em;

  border-bottom: 1px solid #2a3a2a;

  padding-bottom: 5px;

 }



 /* Files list */

 .files-list {

  background: #232b28;

  border-radius: 8px;

  max-height: 210px;

  overflow-y: auto;

  box-shadow: inset 0 0 8px #1a2a1a;

 }

 .file-item {

  display: flex;

  justify-content: space-between;

  align-items: center;

  padding: 8px 14px;

  border-bottom: 1px solid #2f3a33;

  cursor: pointer;

  transition: background 0.25s ease;

  position: relative;

 }

 .file-item:last-child {

  border-bottom: none;

 }

 .file-item:hover,

 .file-item:focus-visible {

  background: #365d31;

  outline: none;

 }

 .file-item.selected {

  background: #1db954;

  color: #121212;

  font-weight: 700;

  box-shadow: 0 0 12px #1db954cc;

 }

 .file-name {

  flex: 1;

  white-space: nowrap;

  overflow: hidden;

  text-overflow: ellipsis;

  padding-left: 6px;

  user-select: text;

 }

 .status {

  display: flex;

  align-items: center;

  gap: 6px;

  min-width: 90px;

  font-weight: 600;

  text-transform: uppercase;

  font-size: 0.85rem;

  letter-spacing: 0.03em;

 }

 /* Status colors and icons */

 .status svg {

  width: 16px;

  height: 16px;

  flex-shrink: 0;

 }

 .status.modified {

  color: #fcba03;

 }

 .status.modified svg path {

  stroke: #fcba03;

 }

 .status.staged {

  color: #1db954;

 }

 .status.staged svg path {

  stroke: #1db954;

 }

 .status.committed {

  color: #888;

 }

 .status.committed svg path {

  stroke: #888;

 }



 /* Buttons container */

 .buttons {

  display: flex;

  gap: 10px;

  margin-top: 12px;

  flex-wrap: wrap;

 }

 /* Buttons style */

 button {

  cursor: pointer;

  background: linear-gradient(145deg, #2e3b2e, #243224);

  border: none;

  color: #c7f4c7;

  padding: 8px 13px;

  border-radius: 8px;

  font-weight: 700;

  font-size: 0.95rem;

  box-shadow:

    2px 2px 5px #1a2f1a,

   -2px -2px 5px #3b593b;

  display: flex;

  align-items: center;

  gap: 6px;

  flex: 1 1 auto;

  justify-content: center;

  transition: all 0.25s ease;

  user-select: none;

  position: relative;

 }

 button:hover:not(:disabled),

 button:focus-visible:not(:disabled) {

  background: #1db954;

  color: #121212;

  box-shadow:

   0 0 12px 2px #1db954cc,

   inset 0 0 10px 3px #146814;

  outline: none;

 }

 button:disabled {

  opacity: 0.38;

  cursor: not-allowed;

  box-shadow: none;

 }

 button svg {

  width: 18px;

  height: 18px;

  stroke-width: 2.3;

  stroke-linecap: round;

  stroke-linejoin: round;

  stroke: currentColor;

  user-select: none;

 }



 /* Commit section */

 input[type="text"] {

  width: 100%;

  padding: 10px 14px;

  border-radius: 10px;

  border: none;

  background: #222d22;

  color: #abe5ab;

  font-family: 'Fira Code', monospace;

  font-size: 1rem;

  box-shadow:

   inset 1px 1px 4px #1a2d1a,

   inset -1px -1px 3px #304930;

  transition: background 0.3s ease;

 }

 input[type="text"]::placeholder {

  color: #6c9973aa;

 }

 input[type="text"]:focus {

  background: #1db954;

  color: #121212;

  outline: none;

  box-shadow:

   inset 0 0 15px 5px #33e066cc;

 }



 /* Commit history */

 .history-list {

  background: #233326;

  border-radius: 10px;

  max-height: 150px;

  overflow-y: auto;

  box-shadow: inset 0 0 8px #185018cc;

  font-size: 0.9rem;

  padding: 8px 12px;

 }

 .commit-item {

  padding: 10px 14px;

  border-bottom: 1px solid #2f4d2f;

  user-select: text;

 }

 .commit-item:last-child {

  border-bottom: none;

 }

 .commit-message {

  font-weight: 700;

  color: #ade39a;

  margin-bottom: 4px;

  letter-spacing: 0.02em;

 }

 .commit-time {

  color: #9fcc9f;

  font-size: 0.82rem;

  font-style: italic;

  user-select: none;

 }



 /* Scrollbars */

 .files-list::-webkit-scrollbar,

 .history-list::-webkit-scrollbar {

  width: 8px;

  background-color: #1b2a1b;

 }

 .files-list::-webkit-scrollbar-thumb,

 .history-list::-webkit-scrollbar-thumb {

  background-color: #165016;

  border-radius: 4px;

 }



 /* Tooltip container */

 .tooltip {

  position: relative;

  display: inline-block;

 }

 .tooltip .tooltiptext {

  visibility: hidden;

  width: max-content;

  background-color: #333a33bb;

  color: #b2ffb2;

  text-align: center;

  border-radius: 6px;

  padding: 4px 10px;

  position: absolute;

  z-index: 100;

  font-size: 0.7rem;

  bottom: 125%;

  left: 50%;

  transform: translateX(-50%);

  opacity: 0;

  transition: opacity 0.3s;

  white-space: nowrap;

  pointer-events: none;

 }

 .tooltip:hover .tooltiptext,

 .tooltip:focus-within .tooltiptext {

  visibility: visible;

  opacity: 1;

 }



 /* Responsive tweaks */

 @media (max-width: 400px) {

  body {

   max-width: 100vw;

   max-height: 600px;

   padding: 8px;

  }

  h1 {

   font-size: 1.5rem;

   margin-bottom: 12px;

  }

  .container {

   padding: 12px 12px;

  }

  button {

   font-size: 0.9rem;

   padding: 7px 10px;

  }

  .file-name {

   font-size: 0.9rem;

  }

 }

</style>

</head>

<body>

<h1>Simulador Control de Versiones</h1>

<div class="container" role="main" aria-label="Simulador de control de versiones">

 <section class="files-section" aria-label="Lista de archivos con estados">

  <h2>Archivos</h2>

  <div class="files-list" id="filesList" tabindex="0" aria-label="Lista de archivos" role="listbox" aria-multiselectable="false">

   <!-- Files loaded by JS -->

  </div>

  <div class="buttons">

   <button id="stageBtn" class="tooltip" disabled aria-disabled="true" aria-describedby="tipStage">

    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M5 13l4 4L19 7"/></svg>

    Preparar

    <span class="tooltiptext" id="tipStage">Mover archivo modificado a área de preparación (stage)</span>

   </button>

   <button id="unstageBtn" class="tooltip" disabled aria-disabled="true" aria-describedby="tipUnstage">

    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><line x1="18" y1="6" x2="6" y2="18"/></svg>

    Despreparar

    <span class="tooltiptext" id="tipUnstage">Sacar archivo del área de preparación (unstage)</span>

   </button>

   <button id="resetBtn" class="tooltip" disabled aria-disabled="true" aria-describedby="tipReset">

    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M12 19a7 7 0 1 0-7-7"/></svg>

    Restaurar

    <span class="tooltiptext" id="tipReset">Descartar cambios y restaurar archivo</span>

   </button>

  </div>

 </section>



 <section class="commit-section" aria-label="Sección de commits">

  <h2>Commit</h2>

  <input type="text" id="commitMsg" placeholder="Mensaje del commit (mín. 5 caracteres)" aria-label="Mensaje del commit" autocomplete="off" />

  <button id="commitBtn" class="tooltip" disabled aria-disabled="true" aria-describedby="tipCommitBtn" >

   <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><polyline points="12 19 5 12 12 5"/></svg>

   Hacer Commit

   <span class="tooltiptext" id="tipCommitBtn">Guardar y crear un nuevo commit con archivos preparados</span>

  </button>

 </section>



 <section class="history-section" aria-label="Historial de commits">

  <h2>Historial de Commits <span id="commitCountBadge" aria-live="polite" aria-atomic="true" style="color:#1db954; font-weight:700;"></span></h2>

  <div class="history-list" id="commitHistory" tabindex="0" aria-live="polite" aria-label="Historial de commits registrados">

   <div style="padding:12px; color:#5a855a;">No hay commits aún.</div>

  </div>

 </section>

</div>



<script>

 // Files with states: unmodified (not used), modified, staged, committed

 let files = [

  { name: 'index.html', state: 'modified' },

  { name: 'app.js', state: 'modified' },

  { name: 'style.css', state: 'modified' },

  { name: 'README.md', state: 'committed' },

 ];



 let selectedFileIndex = null;

 const filesListEl = document.getElementById('filesList');

 const stageBtn = document.getElementById('stageBtn');

 const unstageBtn = document.getElementById('unstageBtn');

 const resetBtn = document.getElementById('resetBtn');

 const commitBtn = document.getElementById('commitBtn');

 const commitMsgInput = document.getElementById('commitMsg');

 const commitHistoryEl = document.getElementById('commitHistory');

 const commitCountBadge = document.getElementById('commitCountBadge');



 const commits = [];



 // Utility to format date/time string

 function formatDate(date) {

  return date.toLocaleString([], {year:'numeric', month:'short', day:'numeric', hour:'2-digit', minute:'2-digit'});

 }



 // File status icons SVG strings - to embed inline for each file item

 const statusIcons = {

  modified: `<svg aria-hidden="true" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10"/></svg>`,

  staged: `<svg aria-hidden="true" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><polyline points="20 6 9 17 4 12"/></svg>`,

  committed: `<svg aria-hidden="true" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><circle cx="12" cy="12" r="3"/><circle cx="12" cy="12" r="10"/></svg>`

 };



 // Render files list

 function renderFiles() {

  filesListEl.innerHTML = '';

  files.forEach((file, idx) => {

   const div = document.createElement('div');

   div.classList.add('file-item');

   if (idx === selectedFileIndex) {

    div.classList.add('selected');

    div.setAttribute('aria-selected', 'true');

   } else {

    div.setAttribute('aria-selected', 'false');

   }

   div.setAttribute('tabindex', '0');

   div.setAttribute('role', 'option');

   div.setAttribute('aria-label', `${file.name}, estado: ${file.state}`);



   div.innerHTML = `

    <div aria-hidden="true" class="status ${file.state}">${statusIcons[file.state]}</div>

    <span class="file-name">${file.name}</span>

    <div aria-hidden="true" class="status-text status ${file.state}">${file.state.toUpperCase()}</div>

   `;



   div.addEventListener('click', () => {

    selectFile(idx);

   });

   div.addEventListener('keydown', (e) => {

    if (e.key === "Enter" || e.key === " ") {

     e.preventDefault();

     selectFile(idx);

    }

   });



   filesListEl.appendChild(div);

  });

  updateButtons();

  updateCommitButton();

  updateCommitCount();

 }



 // Select a file or toggle selection off

 function selectFile(index) {

  if (selectedFileIndex === index) {

   selectedFileIndex = null;

  } else {

   selectedFileIndex = index;

  }

  renderFiles();

 }



 // Update buttons enabled/disabled depending on state & selection

 function updateButtons() {

  if (selectedFileIndex === null) {

   stageBtn.disabled = true;

   stageBtn.setAttribute('aria-disabled', 'true');

   unstageBtn.disabled = true;

   unstageBtn.setAttribute('aria-disabled', 'true');

   resetBtn.disabled = true;

   resetBtn.setAttribute('aria-disabled', 'true');

   return;

  }

  const file = files[selectedFileIndex];

  // Stage: only valid if modified

  if (file.state === 'modified') {

   stageBtn.disabled = false;

   stageBtn.setAttribute('aria-disabled', 'false');

  } else {

   stageBtn.disabled = true;

   stageBtn.setAttribute('aria-disabled', 'true');

  }

  // Unstage: only if staged

  if (file.state === 'staged') {

   unstageBtn.disabled = false;

   unstageBtn.setAttribute('aria-disabled', 'false');

  } else {

   unstageBtn.disabled = true;

   unstageBtn.setAttribute('aria-disabled', 'true');

  }

  // Reset: if modified or staged

  if (file.state === 'modified' || file.state === 'staged') {

   resetBtn.disabled = false;

   resetBtn.setAttribute('aria-disabled', 'false');

  } else {

   resetBtn.disabled = true;

   resetBtn.setAttribute('aria-disabled', 'true');

  }

 }



 // Enable commit button if any staged file AND message min length

 function updateCommitButton() {

  const anyStaged = files.some(f => f.state === 'staged');

  const msg = commitMsgInput.value.trim();

  if (anyStaged && msg.length >= 5) {

   commitBtn.disabled = false;

   commitBtn.setAttribute('aria-disabled', 'false');

  } else {

   commitBtn.disabled = true;

   commitBtn.setAttribute('aria-disabled', 'true');

  }

 }



 // Update commit count badge

 function updateCommitCount() {

  if (commits.length === 0) {

   commitCountBadge.textContent = '';

  } else {

   commitCountBadge.textContent = `(${commits.length})`;

  }

 }



 // Button event handlers

 stageBtn.addEventListener('click', () => {

  if (selectedFileIndex === null) return;

  if (files[selectedFileIndex].state === 'modified') {

   files[selectedFileIndex].state = 'staged';

   renderFiles();

  }

 });



 unstageBtn.addEventListener('click', () => {

  if (selectedFileIndex === null) return;

  if (files[selectedFileIndex].state === 'staged') {

   files[selectedFileIndex].state = 'modified';

   renderFiles();

  }

 });



 resetBtn.addEventListener('click', () => {

  if (selectedFileIndex === null) return;

  if (files[selectedFileIndex].state === 'modified' || files[selectedFileIndex].state === 'staged') {

   files[selectedFileIndex].state = 'committed';

   renderFiles();

  }

 });



 commitBtn.addEventListener('click', () => {

  const message = commitMsgInput.value.trim();

  if (message.length < 5) return;



  const stagedFiles = files.filter(f => f.state === 'staged');

  if (stagedFiles.length === 0) return;



  // Commit staged files

  stagedFiles.forEach(f => f.state = 'committed');



  commits.unshift({

   message,

   time: new Date(),

   files: stagedFiles.map(f => f.name),

  });



  commitMsgInput.value = '';

  selectedFileIndex = null;

  renderFiles();

  renderCommits();

 });



 commitMsgInput.addEventListener('input', () => {

  updateCommitButton();

 });



 // Render commit history

 function renderCommits() {

  if (commits.length === 0) {

   commitHistoryEl.innerHTML = '<div style="padding:12px; color:#5a855a;">No hay commits aún.</div>';

   return;

  }

  commitHistoryEl.innerHTML = '';

  commits.forEach(commit => {

   const div = document.createElement('div');

   div.className = 'commit-item';

   div.tabIndex = 0;

   div.setAttribute('aria-label', `Commit: ${commit.message}, hecho el ${formatDate(commit.time)}, archivos: ${commit.files.join(', ')}`);

   div.innerHTML = `

    <div class="commit-message">${commit.message}</div>

    <div class="commit-time">${formatDate(commit.time)} — Archivos: ${commit.files.join(', ')}</div>

   `;

   commitHistoryEl.appendChild(div);

  });

 }



 // Initialize rendering

 renderFiles();

 renderCommits();

</script>

</body>

</html>
