<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Control de Versiones Visual</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Fira+Code&display=swap');

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body, html {
    height: 100%;
    font-family: 'Fira Code', monospace;
    background: linear-gradient(135deg, #1e1e2f, #14141e);
    color: #ccc;
    overflow: hidden;
  }

  #app {
    display: flex;
    height: 100vh;
    width: 100vw;
  }

  /* Sidebar for file list */
  #fileList {
    width: 320px;
    background: #222233;
    border-right: 2px solid #444466;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  #fileList header {
    padding: 20px;
    text-align: center;
    font-weight: 700;
    font-size: 1.3rem;
    background: linear-gradient(90deg, #5e72eb, #825ee4);
    color: white;
    user-select: none;
    letter-spacing: 1.3px;
    box-shadow: 0 3px 12px rgba(130,94,228,.7);
  }

  #searchInput {
    border: none;
    margin: 12px 20px;
    padding: 10px 12px;
    border-radius: 8px;
    font-family: 'Fira Code', monospace;
    font-size: 1rem;
    background: #2c2c44;
    color: #bbb;
    transition: background 0.3s ease;
  }
  #searchInput::placeholder {
    color: #666;
  }
  #searchInput:focus {
    background: #4b4b7a;
    outline: none;
    color: white;
  }

  #files {
    flex: 1;
    overflow-y: auto;
    padding: 0 10px;
  }
  .file-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    user-select: none;
    padding: 10px 10px;
    margin: 6px 0;
    background: #2d2d4a;
    border-radius: 8px;
    cursor: pointer;
    transition: background 0.25s ease;
  }
  .file-item:hover {
    background: #4e4e8d;
  }
  .file-item.selected {
    background: linear-gradient(90deg, #5e72eb, #825ee4);
    color: white;
    font-weight: 700;
    box-shadow: 0 0 10px #736bf2;
  }

  .file-name {
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .file-status {
    font-size: 0.8rem;
    text-transform: uppercase;
    font-weight: 700;
    padding: 3px 7px;
    border-radius: 12px;
  }

  .status-modified {
    background: #ffb545;
    color: #4a3700;
  }

  .status-staged {
    background: #47d487;
    color: #0e4724;
  }

  .status-committed {
    background: #8a8a8a;
    color: #222222;
  }

  /* Main content - file editor and commit history */
  #mainContent {
    flex: 1;
    display: flex;
    flex-direction: column;
    background: #1b1b2e;
  }

  /* Editor & diff */
  #editorContainer {
    display: flex;
    flex: 1;
    overflow: hidden;
  }

  #editorPane {
    flex: 1;
    display: flex;
    flex-direction: column;
    border-right: 2px solid #444466;
  }

  #editorHeader {
    padding: 15px;
    background: linear-gradient(to right, #556ee6, #8e54e9);
    color: white;
    font-weight: 700;
    font-size: 1.2rem;
    user-select: none;
    box-shadow: 0 0 20px #7653e9cc;
  }

  #editorTextarea {
    flex: 1;
    background: #151632;
    color: #dcdcdc;
    font-family: 'Fira Code', monospace;
    font-size: 1rem;
    padding: 20px;
    border: none;
    resize: none;
    outline: none;
    overflow-y: auto;
    box-shadow:
      inset 0 0 8px #2b287e,
      inset 0 0 12px #5152cc;
  }

  #diffPane {
    width: 320px;
    background: #181b39;
    display: flex;
    flex-direction: column;
  }

  #diffHeader {
    padding: 15px;
    background: linear-gradient(to right, #f45c43, #eb3349);
    color: white;
    font-weight: 700;
    font-size: 1.2rem;
    user-select: none;
    box-shadow: 0 0 20px #eb334999;
  }

  #diffContent {
    flex: 1;
    overflow-y: auto;
    padding: 10px;
    font-family: monospace;
    font-size: 0.9rem;
    color: #eee;
    line-height: 1.3;
  }

  .diff-line {
    white-space: pre-wrap;
    word-break: break-word;
    padding: 3px 10px;
    border-radius: 6px;
    margin-bottom: 2px;
  }

  .diff-added {
    background-color: #334f1d;
    color: #a6f0a6;
  }

  .diff-removed {
    background-color: #6a2d2d;
    color: #f08c8c;
  }

  .diff-context {
    color: #999;
    background: transparent;
  }

  /* Controls below editor */
  #editorControls {
    background: #25254e;
    padding: 12px 20px;
    display: flex;
    gap: 15px;
    user-select: none;
  }
  button.control-btn {
    flex: 1;
    font-weight: 700;
    font-size: 1rem;
    padding: 10px 12px;
    color: white;
    background: linear-gradient(135deg, #3a3ac1, #7b51be);
    border: none;
    border-radius: 12px;
    cursor: pointer;
    box-shadow: 0 0 10px #6e5edb;
    transition: background-color 0.3s ease;
  }
  button.control-btn:disabled {
    background: #444475;
    cursor: not-allowed;
    box-shadow: none;
  }
  button.control-btn:hover:not(:disabled),
  button.control-btn:focus:not(:disabled) {
    background-color: #8a63e0;
    outline: none;
  }

  /* Commit panel */
  #commitPanel {
    background: #151631;
    padding: 15px 20px;
    border-top: 2px solid #444466;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  #commitMessage {
    flex: 1;
    padding: 12px 14px;
    border-radius: 14px;
    border: none;
    font-family: 'Fira Code', monospace;
    font-size: 1rem;
    background: #29294d;
    color: #cccccc;
    box-shadow:
      inset 1px 1px 6px #222254,
      inset -1px -1px 8px #484892;
    outline-offset: 2px;
    transition: background-color 0.3s ease;
  }
  #commitMessage::placeholder {
    color: #666699;
  }
  #commitMessage:focus {
    background: #3e3ecc;
    color: white;
    outline: none;
  }

  #commitBtn {
    padding: 12px 28px;
    font-weight: 700;
    font-size: 1.1rem;
    border-radius: 14px;
    border: none;
    cursor: pointer;
    background: linear-gradient(135deg, #37cdbe, #2aa7a2);
    color: #042f2f;
    box-shadow: 0 0 12px #2ab2ff;
    transition: background-color 0.3s ease;
  }
  #commitBtn:disabled {
    background: #1a3747;
    color: #556677;
    cursor: not-allowed;
    box-shadow: none;
  }
  #commitBtn:hover:not(:disabled),
  #commitBtn:focus:not(:disabled) {
    background-color: #2bb8d6;
    outline: none;
  }

  /* Commit History */
  #commitHistory {
    background: #1d1d36;
    height: 180px;
    overflow-y: auto;
    padding: 15px 20px;
    font-family: monospace;
    font-size: 0.85rem;
    line-height: 1.3;
  }

  .commit-entry {
    margin-bottom: 14px;
    padding-bottom: 6px;
    border-bottom: 1px solid #38385760;
    user-select: text;
  }

  .commit-message {
    font-weight: 700;
    color: #7ac7f5;
    margin-bottom: 4px;
  }

  .commit-meta {
    color: #8aaaff88;
    font-style: italic;
  }

  /* Scrollbar styling */
  #fileList::-webkit-scrollbar,
  #diffContent::-webkit-scrollbar,
  #files::-webkit-scrollbar,
  #commitHistory::-webkit-scrollbar {
    width: 8px;
  }

  #fileList::-webkit-scrollbar-track,
  #diffContent::-webkit-scrollbar-track,
  #files::-webkit-scrollbar-track,
  #commitHistory::-webkit-scrollbar-track {
    background: #1b1b2e;
  }

  #fileList::-webkit-scrollbar-thumb,
  #diffContent::-webkit-scrollbar-thumb,
  #files::-webkit-scrollbar-thumb,
  #commitHistory::-webkit-scrollbar-thumb {
    background-color: #5658d3;
    border-radius: 4px;
  }

  /* Responsive for smaller widths */
  @media (max-width: 800px) {
    #app {
      flex-direction: column;
    }
    #fileList {
      width: 100%;
      height: 220px;
      border-right: none;
      border-bottom: 2px solid #444466;
    }
    #mainContent {
      height: calc(100vh - 220px);
    }
    #editorContainer {
      flex-direction: column;
    }
    #diffPane {
      width: 100%;
      height: 120px;
      border-left: none;
      border-top: 2px solid #444466;
    }
    #editorPane {
      width: 100%;
      border-right: none;
      height: calc(100% - 120px);
    }
  }
</style>
</head>
<body>
<div id="app" role="application" aria-label="Simulador visual de control de versiones">
  <aside id="fileList" aria-label="Lista de archivos">
    <header>Archivos</header>
    <input type="text" id="searchInput" aria-label="Buscar archivos" placeholder="Buscar archivo..." autocomplete="off" />
    <div id="files" role="list" tabindex="0" aria-live="polite" aria-relevant="additions removals" aria-atomic="true"></div>
  </aside>
  <section id="mainContent">
    <div id="editorContainer">
      <div id="editorPane">
        <div id="editorHeader" aria-live="polite" aria-atomic="true" aria-relevant="text">
          Seleccione un archivo
        </div>
        <textarea id="editorTextarea" spellcheck="false" aria-label="Editor de contenido del archivo seleccionado" disabled></textarea>
        <div id="editorControls">
          <button id="btnStage" class="control-btn" disabled aria-disabled="true" title="Preparar archivo modificado">Preparar</button>
          <button id="btnReset" class="control-btn" disabled aria-disabled="true" title="Descartar cambios y restaurar">Restaurar</button>
        </div>
      </div>
      <section id="diffPane" aria-label="Vista previa de diferencias">
        <div id="diffHeader">Diferencias</div>
        <div id="diffContent" tabindex="0" aria-live="polite" aria-atomic="true">Seleccione un archivo para ver las diferencias aquí.</div>
      </section>
    </div>
    <div id="commitPanel" role="region" aria-label="Panel para realizar commits">
      <input type="text" id="commitMessage" aria-label="Mensaje del commit" placeholder="Escribe el mensaje del commit (mín. 5 caracteres)" autocomplete="off" />
      <button id="commitBtn" disabled aria-disabled="true" title="Hacer commit con archivos preparados">Commit</button>
    </div>
    <section id="commitHistory" aria-live="polite" aria-label="Historial de commits recientes">
      <div style="color:#666; text-align:center; padding-top: 60px; user-select:none;">No hay commits aún.</div>
    </section>
  </section>
</div>
<script>
(() => {
  // Initial files data
  const files = [
    {
      name: 'index.html',
      contentCommitted: `<!DOCTYPE html>
<html>
<head><title>Demo</title></head>
<body>Hello world!</body>
</html>`,
      contentWorking: `<!DOCTYPE html>
<html>
<head><title>Demo</title></head>
<body>Hello world!!!</body>
</html>`,
      state: 'modified'
    },
    {
      name: 'app.js',
      contentCommitted: `console.log('Initial commit');`,
      contentWorking: `console.log('Initial commit');`,
      state: 'committed'
    },
    {
      name: 'style.css',
      contentCommitted: `body { background: white; color: black; }`,
      contentWorking: `body { background: #222233; color: #ddd; }`,
      state: 'modified'
    }
  ];

  let selectedIndex = null;
  const commits = [];

  // DOM elements
  const filesContainer = document.getElementById('files');
  const searchInput = document.getElementById('searchInput');
  const editorHeader = document.getElementById('editorHeader');
  const editorTextarea = document.getElementById('editorTextarea');
  const btnStage = document.getElementById('btnStage');
  const btnReset = document.getElementById('btnReset');
  const commitMessageInput = document.getElementById('commitMessage');
  const commitBtn = document.getElementById('commitBtn');
  const diffContent = document.getElementById('diffContent');
  const commitHistory = document.getElementById('commitHistory');

  // Escape HTML special chars
  function escapeHtml(text) {
    return text.replace(/[&<>"']/g, tag => ({
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    })[tag]);
  }

  // Render files list filtered
  function renderFiles() {
    const search = searchInput.value.toLowerCase();
    const filtered = files
      .map((f,i) => ({file: f, i}))
      .filter(({file}) => file.name.toLowerCase().includes(search));
    filesContainer.innerHTML = '';
    if (filtered.length === 0) {
      const noRes = document.createElement('div');
      noRes.textContent = 'No hay archivos.';
      noRes.style.textAlign = 'center';
      noRes.style.marginTop = '1rem';
      noRes.style.color = '#666';
      filesContainer.appendChild(noRes);
      return;
    }
    filtered.forEach(({file, i}) => {
      const div = document.createElement('div');
      div.classList.add('file-item');
      if(i === selectedIndex) div.classList.add('selected');
      div.setAttribute('role', 'option');
      div.tabIndex = 0;
      div.setAttribute('aria-selected', i === selectedIndex ? 'true' : 'false');
      div.setAttribute('aria-label', `${file.name}, estado ${file.state}`);

      const nameSpan = document.createElement('span');
      nameSpan.classList.add('file-name');
      nameSpan.textContent = file.name;
      div.appendChild(nameSpan);

      const statusSpan = document.createElement('span');
      statusSpan.classList.add('file-status');
      if(file.state === 'modified') statusSpan.classList.add('status-modified');
      else if(file.state === 'staged') statusSpan.classList.add('status-staged');
      else statusSpan.classList.add('status-committed');
      statusSpan.textContent = file.state.toUpperCase();
      div.appendChild(statusSpan);

      div.addEventListener('click', () => {
        selectFile(i);
      });
      div.addEventListener('keydown', e => {
        if(e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          selectFile(i);
        }
      });
      filesContainer.appendChild(div);
    });
  }

  // Select file by index
  function selectFile(i) {
    selectedIndex = i;
    updateEditor();
    renderFiles();
  }

  // Update editor UI
  function updateEditor() {
    if(selectedIndex === null || selectedIndex < 0 || selectedIndex >= files.length) {
      editorHeader.textContent = 'Seleccione un archivo';
      editorTextarea.value = '';
      editorTextarea.disabled = true;
      btnStage.disabled = true;
      btnReset.disabled = true;
      diffContent.textContent = 'Seleccione un archivo para ver las diferencias aquí.';
      return;
    }
    const file = files[selectedIndex];
    editorHeader.textContent = file.name + ` (${file.state.toUpperCase()})`;
    editorTextarea.disabled = false;
    editorTextarea.value = file.contentWorking;
    btnStage.disabled = file.state !== 'modified';
    btnReset.disabled = file.state === 'committed';
    renderDiff(file);
  }

  // Simple line diff (naive)
  function renderDiff(file) {
    if(file.state === 'committed') {
      diffContent.textContent = 'Sin cambios.';
      return;
    }
    const baseLines = file.contentCommitted.split('\n');
    const newLines = file.contentWorking.split('\n');
    let result = '';
    for(let i=0; i < Math.max(baseLines.length, newLines.length); i++) {
      const baseLine = baseLines[i];
      const newLine = newLines[i];
      if(baseLine === undefined) {
        result += `<div class="diff-line diff-added">+ ${escapeHtml(newLine)}</div>`;
      } else if(newLine === undefined) {
        result += `<div class="diff-line diff-removed">- ${escapeHtml(baseLine)}</div>`;
      } else if(baseLine !== newLine) {
        result += `<div class="diff-line diff-removed">- ${escapeHtml(baseLine)}</div>`;
        result += `<div class="diff-line diff-added">+ ${escapeHtml(newLine)}</div>`;
      } else {
        result += `<div class="diff-line diff-context">  ${escapeHtml(baseLine)}</div>`;
      }
    }
    diffContent.innerHTML = result || 'Sin diferencias.';
  }

  // Update content on textarea input
  editorTextarea.addEventListener('input', () => {
    if(selectedIndex === null) return;
    const file = files[selectedIndex];
    file.contentWorking = editorTextarea.value;
    if(file.contentWorking !== file.contentCommitted) {
      if(file.state === 'committed') file.state = 'modified';
    } else {
      if(file.state !== 'committed') file.state = 'committed';
    }
    updateEditor();
    renderFiles();
    updateCommitBtn();
  });

  // Buttons
  btnStage.addEventListener('click', () => {
    if(selectedIndex === null) return;
    const file = files[selectedIndex];
    if(file.state === 'modified') {
      file.state = 'staged';
      updateEditor();
      renderFiles();
      updateCommitBtn();
    }
  });
  btnReset.addEventListener('click', () => {
    if(selectedIndex === null) return;
    const file = files[selectedIndex];
    file.contentWorking = file.contentCommitted;
    file.state = 'committed';
    updateEditor();
    renderFiles();
    updateCommitBtn();
  });

  // Commit management
  function updateCommitBtn() {
    const anyStaged = files.some(f => f.state === 'staged');
    const msg = commitMessageInput.value.trim();
    commitBtn.disabled = !(anyStaged && msg.length >= 5);
  }
  commitMessageInput.addEventListener('input', updateCommitBtn);
  commitBtn.addEventListener('click', () => {
    const msg = commitMessageInput.value.trim();
    if(msg.length < 5) return;
    const staged = files.filter(f => f.state === 'staged');
    if(staged.length === 0) return;

    staged.forEach(f => {
      f.contentCommitted = f.contentWorking;
      f.state = 'committed';
    });

    commits.unshift({
      message: msg,
      date: new Date(),
      files: staged.map(f => f.name)
    });

    commitMessageInput.value = '';
    commitBtn.disabled = true;

    renderFiles();
    updateEditor();
    renderCommits();
  });


  // Commit history render
  function renderCommits() {
    commitHistory.innerHTML = '';
    if(commits.length === 0) {
      commitHistory.textContent = 'No hay commits aún.';
      commitHistory.style.color = '#666766';
      commitHistory.style.fontStyle = 'italic';
      return;
    }
    commitHistory.style.color = '#ccc';
    commitHistory.style.fontStyle = 'normal';
    commits.forEach(commit => {
      const container = document.createElement('div');
      container.classList.add('commit-entry');

      const msg = document.createElement('div');
      msg.classList.add('commit-message');
      msg.textContent = commit.message;

      const meta = document.createElement('div');
      meta.classList.add('commit-meta');
      const dateStr = commit.date.toLocaleString();
      meta.textContent = `${dateStr} — Archivos: ${commit.files.join(', ')}`;

      container.appendChild(msg);
      container.appendChild(meta);
      commitHistory.appendChild(container);
    });
  }

  // Search input event
  searchInput.addEventListener('input', () => {
    renderFiles();
  });

  // Initial render
  renderFiles();
  updateEditor();
  renderCommits();
})();
</script>
</body>
</html>

